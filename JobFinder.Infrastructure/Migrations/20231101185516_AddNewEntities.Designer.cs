// <auto-generated />
using System;
using JobFinder.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobFinder.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231101185516_AddNewEntities")]
    partial class AddNewEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CandidateJobOffer", b =>
                {
                    b.Property<int>("CandidatesId")
                        .HasColumnType("int");

                    b.Property<int>("JobOffersId")
                        .HasColumnType("int");

                    b.HasKey("CandidatesId", "JobOffersId");

                    b.HasIndex("JobOffersId");

                    b.ToTable("CandidateJobOffer");
                });

            modelBuilder.Entity("JobFinder.Infrastructure.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8dc1ad43-1bbf-4034-bd43-733b4697502f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b47038e-c96f-4cf9-b129-1e38f06305e9",
                            Email = "candidate@mail.com",
                            EmailConfirmed = false,
                            FullName = "Martin Georgiev",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "candidate@mail.com",
                            NormalizedUserName = "candidate@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEDIQXh/oqPgCsWzYn1wzIkrETuvePXHNFOgbkv7oyl+1BG874Nd3qvc+EAFwcu6+rA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "466a35ec-8ea2-4094-94b8-6f7fd5af5002",
                            TwoFactorEnabled = false,
                            UserName = "candidate@mail.com"
                        },
                        new
                        {
                            Id = "02618b16-3bfe-49ee-951e-00e47a895bd6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1d88c64-249e-4b85-8125-b9f8d10db759",
                            Email = "employer@mail.com",
                            EmailConfirmed = false,
                            FullName = "UniCredit Bulbank",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "employer@mail.com",
                            NormalizedUserName = "employer@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEFLFTTyjU9tFQ29dRdMeE2kqwtJBsdHfUh4F2IccG/ixblw/jy8XQeE8MheCOWGONQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a6f9e88-2da6-4180-91b5-8fdb08f3c7a0",
                            TwoFactorEnabled = false,
                            UserName = "employer@mail.com"
                        },
                        new
                        {
                            Id = "da08baf8-39be-45bd-9def-7ff7ba58309d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2ccaa9d-d145-41ed-b294-2afe4afb37fa",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FullName = "Admin Admin",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@mail.com",
                            NormalizedUserName = "admin@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEPxinVGTyvTTjIq/T3fBdc60HsO0DdjN0dEC/TVtELorLFdYm2KNq+WThJRxsA/OHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "93e49602-d507-4d0e-b4c2-7458ddcdb228",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        });
                });

            modelBuilder.Entity("JobFinder.Infrastructure.Data.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Candidates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "8dc1ad43-1bbf-4034-bd43-733b4697502f"
                        });
                });

            modelBuilder.Entity("JobFinder.Infrastructure.Data.Employer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Employers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "02618b16-3bfe-49ee-951e-00e47a895bd6"
                        });
                });

            modelBuilder.Entity("JobFinder.Infrastructure.Data.JobCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("JobCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Retail"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tourism"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Banking"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Development"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Real estate"
                        });
                });

            modelBuilder.Entity("JobFinder.Infrastructure.Data.JobOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("JobCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("Money");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("JobTypeId");

                    b.ToTable("JobOffers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "<p><strong>Description:</strong></p>\r\n\r\n<p>As an on-staff Consultant with a core focus on data analysis for client operational reviews and analysis of business issues, you will have the opportunity to work on client projects side by side with experienced project team members who have direct industry experience.</p>\r\n\r\n<p><strong>Job Duties and Responsibilities:</strong></p>\r\n\r\n<ul>\r\n	<li>Gather and analyze data. Document your findings and make recommendations based upon your analysis.</li>\r\n	<li>Present your findings through reporting and/or presentations.</li>\r\n</ul>\r\n\r\n<p><strong>Qualifications:</strong></p>\r\n\r\n<ul>\r\n	<li>3-5 years of experience working in a banking or financial service industry</li>\r\n	<li>1-2 Years of data analysis experience</li>\r\n	<li>Superior Excel skills</li>\r\n	<li>Excellent verbal and written communication skills</li>\r\n</ul>",
                            CreatorId = 1,
                            JobCategoryId = 3,
                            JobTypeId = 2,
                            Salary = 1700m,
                            Title = "Analytical Banking Consultant"
                        },
                        new
                        {
                            Id = 2,
                            Content = "<p><strong>Job Duties and Responsibilities:</strong></p>\r\n\r\n<ul>\r\n	<li>Design, develop and unit test solutions of any size or complexity</li>\r\n	<li>Produce clean and high-quality code</li>\r\n	<li>Diagnose defects and provide effective solutions</li>\r\n</ul>\r\n\r\n<p><strong>Qualifications:</strong></p>\r\n\r\n<ul>\r\n	<li>A bachelor&#39;s degree and 3+ years of professional experience in Java / Kotlin</li>\r\n	<li>Profile focused on backend development</li>\r\n	<li>Experience in container-orchestration platforms such as Kubernetes / Openshift for large scale deployment of micro services is considered as an advantage</li>\r\n	<li>Excellent verbal and written communication skills</li>\r\n	<li>Advanced English</li>\r\n</ul>",
                            CreatorId = 1,
                            JobCategoryId = 4,
                            JobTypeId = 2,
                            Title = "Java Backend Developer"
                        },
                        new
                        {
                            Id = 3,
                            Content = "<p><strong>Description:</strong></p>\r\n\r\n<p>Provides customers excellent telephone service to assure the retention and growth of clients&rsquo; portfolio ensuring that customers receive the best service possible.</p>\r\n\r\n<p>Duration: 8 weeks</p>\r\n\r\n<p><strong>Job Duties and Responsibilities:</strong></p>\r\n\r\n<ul>\r\n	<li>Analyzes client needs of service and claims, evaluates the different alternatives to satisfy them, and makes decisions to resolve them immediately</li>\r\n	<li>Promotes cross sales of financial products and services</li>\r\n	<li>Provide information regarding products and services, such as loans, credit cards, balance inquires, and other</li>\r\n</ul>\r\n\r\n<p><strong>Qualifications:</strong></p>\r\n\r\n<ul>\r\n	<li>Excellent customer service skills, including telephone skills and telephone etiquette</li>\r\n	<li>Detail oriented with analytical skills</li>\r\n	<li>Excellent oral and written communication skills in English and Spanish</li>\r\n</ul>",
                            CreatorId = 1,
                            JobCategoryId = 3,
                            JobTypeId = 1,
                            Title = "Telephone Banking Consultant"
                        });
                });

            modelBuilder.Entity("JobFinder.Infrastructure.Data.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Part time"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Full time"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Freelance project"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "148e3a33-ff37-4df0-a66f-d26416e5c981",
                            ConcurrencyStamp = "63029976-a769-4e98-b076-7039fb5003d6",
                            Name = "Administrator",
                            NormalizedName = "administrator"
                        },
                        new
                        {
                            Id = "081218dd-1be7-45e9-a153-eb73758c9f56",
                            ConcurrencyStamp = "324306db-ad8a-4794-ac65-889b20777b8a",
                            Name = "Employer",
                            NormalizedName = "employer"
                        },
                        new
                        {
                            Id = "68dc4906-58cf-4d2b-9683-bf11ea7d4afa",
                            ConcurrencyStamp = "7ffd74ae-b286-424e-80ed-291735648e2a",
                            Name = "Candidate",
                            NormalizedName = "candidate"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "da08baf8-39be-45bd-9def-7ff7ba58309d",
                            RoleId = "148e3a33-ff37-4df0-a66f-d26416e5c981"
                        },
                        new
                        {
                            UserId = "02618b16-3bfe-49ee-951e-00e47a895bd6",
                            RoleId = "081218dd-1be7-45e9-a153-eb73758c9f56"
                        },
                        new
                        {
                            UserId = "8dc1ad43-1bbf-4034-bd43-733b4697502f",
                            RoleId = "68dc4906-58cf-4d2b-9683-bf11ea7d4afa"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CandidateJobOffer", b =>
                {
                    b.HasOne("JobFinder.Infrastructure.Data.Candidate", null)
                        .WithMany()
                        .HasForeignKey("CandidatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobFinder.Infrastructure.Data.JobOffer", null)
                        .WithMany()
                        .HasForeignKey("JobOffersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobFinder.Infrastructure.Data.Candidate", b =>
                {
                    b.HasOne("JobFinder.Infrastructure.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobFinder.Infrastructure.Data.Employer", b =>
                {
                    b.HasOne("JobFinder.Infrastructure.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobFinder.Infrastructure.Data.JobOffer", b =>
                {
                    b.HasOne("JobFinder.Infrastructure.Data.Employer", "Creator")
                        .WithMany("JobOffers")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobFinder.Infrastructure.Data.JobCategory", "JobCategory")
                        .WithMany()
                        .HasForeignKey("JobCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobFinder.Infrastructure.Data.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("JobCategory");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JobFinder.Infrastructure.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JobFinder.Infrastructure.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobFinder.Infrastructure.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JobFinder.Infrastructure.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobFinder.Infrastructure.Data.Employer", b =>
                {
                    b.Navigation("JobOffers");
                });
#pragma warning restore 612, 618
        }
    }
}
